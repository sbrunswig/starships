{"version":3,"sources":["components/SWTable/index.js","App.js","utils/api.js","index.js"],"names":["SWTable","starships","map","starship","name","App","useState","setStarships","filteredStarships","setFilteredStarships","manufacturers","setManufacturers","isLoaded","setIsLoaded","useEffect","getStarships","url","Promise","resolve","reject","fetch","then","response","status","statusText","json","data","concat","results","next","catch","fetchData","allMan","manufacturer","filter","value","index","self","indexOf","sort","console","log","onChange","e","findStarships","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gKAkCeA,EAhCC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,OACE,kCACE,0DACA,gCACE,6BACE,8CAGJ,gCACGA,EAAUC,KAAI,SAACC,GACd,OACE,6BACE,6BAAKA,EAASC,QADPD,EAASC,eCmCfC,MA7Cf,WACE,MAAkCC,mBAAS,IAA3C,mBAAOL,EAAP,KAAkBM,EAAlB,KACA,EAAkDD,mBAAS,IAA3D,mBAAOE,EAAP,KAA0BC,EAA1B,KACA,EAA0CH,mBAAS,IAAnD,mBAAOI,EAAP,KAAsBC,EAAtB,KACA,EAAgCL,oBAAS,GAAzC,mBAAOM,EAAP,KAAiBC,EAAjB,KAyBA,OAvBAC,qBAAU,YCVa,WAyBvB,IAAMb,EAxBN,SAASc,IAAsE,IAAzDC,EAAwD,uDAAlD,iCAAkCf,EAAgB,uDAAJ,GACxE,OAAO,IAAIgB,SAAQ,SAACC,EAASC,GAAV,OACjBC,MAAMJ,GACHK,MAAK,SAACC,GACL,GAAwB,MAApBA,EAASC,OACX,KAAK,GAAL,OAASD,EAASC,OAAlB,aAA6BD,EAASE,YAExCF,EACGG,OACAJ,MAAK,SAACK,GACLzB,EAAYA,EAAU0B,OAAOD,EAAKE,SAE9BF,EAAKG,KACPd,EAAaW,EAAKG,KAAM5B,GAAWoB,KAAKH,GAASY,MAAMX,GAEvDD,EAAQjB,MAGX6B,MAAMX,MAEVW,MAAMX,MAIKJ,CAAa,mCAAmCM,MAAK,SAACK,GAAD,OAAUA,KACjF,OAAOzB,GDfL8B,GAAYV,MAAK,SAACC,GAChBf,EAAae,GACbb,EAAqBa,GACrB,IAAMU,EAASV,EACZpB,KAAI,SAACC,GAAD,OAAcA,EAAS8B,gBAC3BC,QAAO,SAACC,EAAOC,EAAOC,GAAf,OAAwBA,EAAKC,QAAQH,KAAWC,KACvDG,OACH5B,EAAiBqB,GACjBQ,QAAQC,IAAInB,GACZT,GAAY,QAEb,IAYD,+CAEE,yBAAQ6B,SAZe,SAACC,GAC1B,IAAMC,EACe,QAAnBD,EAAEE,OAAOV,MACLlC,EACAA,EAAUiC,QAAO,SAAC/B,GAAD,OAAcA,EAAS8B,eAAiBU,EAAEE,OAAOV,SACxE1B,EAAqBmC,GACrBJ,QAAQC,IAAIG,IAMV,UACE,wBAAQT,MAAM,MAAd,2CACCzB,EAAcR,KAAI,SAAC+B,EAAcG,GAAf,OACjB,wBAAoBD,MAAOF,EAA3B,SACGA,GADUG,SAKhBxB,EAAW,cAAC,EAAD,CAASX,UAAWO,IAAwB,8CExC9DsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.83d632b4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SWTable = ({ starships }) => {\r\n  return (\r\n    <table>\r\n      <caption>Star Wars Starships</caption>\r\n      <thead>\r\n        <tr>\r\n          <th>Starship</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {starships.map((starship) => {\r\n          return (\r\n            <tr key={starship.name}>\r\n              <td>{starship.name}</td>\r\n              {/* <td>{starship.model}</td>\r\n                <td>{starship.manufacturer}</td>\r\n                <td>{starship.cost_in_credits}</td>\r\n                <td>{starship.length} meters</td>\r\n                <td>{starship.passengers}</td>\r\n                <td>{starship.max_atmosphering_speed}</td>\r\n                <td>{starship.hyperdrive_rating}</td>\r\n                <td>{starship.MGLT}</td>\r\n                <td>{starship.cargo_capacity}</td>\r\n                <td>{starship.consumables}</td> */}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default SWTable;\r\n","import { useEffect, useState } from \"react\";\nimport { fetchData } from \"./utils/api\";\nimport SWTable from \"./components/SWTable\";\n\nfunction App() {\n  const [starships, setStarships] = useState([]);\n  const [filteredStarships, setFilteredStarships] = useState([]);\n  const [manufacturers, setManufacturers] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    fetchData().then((response) => {\n      setStarships(response);\n      setFilteredStarships(response);\n      const allMan = response\n        .map((starship) => starship.manufacturer)\n        .filter((value, index, self) => self.indexOf(value) === index)\n        .sort();\n      setManufacturers(allMan);\n      console.log(response);\n      setIsLoaded(true);\n    });\n  }, []);\n\n  let handleStarshipChange = (e) => {\n    const findStarships =\n      e.target.value === \"all\"\n        ? starships\n        : starships.filter((starship) => starship.manufacturer === e.target.value);\n    setFilteredStarships(findStarships);\n    console.log(findStarships);\n  };\n\n  return (\n    <div>\n      Starship App\n      <select onChange={handleStarshipChange}>\n        <option value=\"all\"> -- Select a manufacturer -- </option>\n        {manufacturers.map((manufacturer, index) => (\n          <option key={index} value={manufacturer}>\n            {manufacturer}\n          </option>\n        ))}\n      </select>\n      {isLoaded ? <SWTable starships={filteredStarships} /> : <div>Loading</div>}\n    </div>\n  );\n}\n\nexport default App;\n","export const fetchData = () => {\r\n  function getStarships(url = \"https://swapi.co/api/starships\", starships = []) {\r\n    return new Promise((resolve, reject) =>\r\n      fetch(url)\r\n        .then((response) => {\r\n          if (response.status !== 200) {\r\n            throw `${response.status}: ${response.statusText}`;\r\n          }\r\n          response\r\n            .json()\r\n            .then((data) => {\r\n              starships = starships.concat(data.results);\r\n\r\n              if (data.next) {\r\n                getStarships(data.next, starships).then(resolve).catch(reject);\r\n              } else {\r\n                resolve(starships);\r\n              }\r\n            })\r\n            .catch(reject);\r\n        })\r\n        .catch(reject)\r\n    );\r\n  }\r\n\r\n  const starships = getStarships(\"https://swapi.dev/api/starships\").then((data) => data);\r\n  return starships;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}