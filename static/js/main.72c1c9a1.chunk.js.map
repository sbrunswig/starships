{"version":3,"sources":["components/SWLoader/index.js","components/SWSelect/index.js","components/SWTable/index.js","App.js","utils/api.js","index.js"],"names":["SWLoader","class","SWSelect","props","onChange","e","filterStarship","target","value","manufacturers","map","manufacturer","index","SWTable","starships","starship","name","starship_class","App","useState","setStarships","filteredStarships","setFilteredStarships","setManufacturers","isLoaded","setIsLoaded","isError","setIsError","useEffect","getStarships","url","Promise","resolve","reject","fetch","then","response","status","Error","json","data","concat","results","next","catch","fetchData","allMan","filter","self","indexOf","sort","console","log","findStarships","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAMeA,EAJE,WACf,OAAO,qBAAKC,MAAM,gBAAX,sBCiBMC,EAlBE,SAACC,GAIhB,OACE,qBAAKF,MAAM,8BAAX,SACE,yBAAQA,MAAM,yBAAyBG,SALd,SAACC,GAC5BF,EAAMG,eAAeD,EAAEE,OAAOC,QAI5B,UACE,wBAAQA,MAAM,MAAd,2CACCL,EAAMM,cAAcC,KAAI,SAACC,EAAcC,GAAf,OACvB,wBAAoBJ,MAAOG,EAA3B,SACGA,GADUC,YC0BRC,EAnCC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,OACE,wBAAOb,MAAM,QAAb,UACE,yBAASA,MAAM,MAAf,iCACA,gCACE,+BACE,oBAAIA,MAAM,sBAAV,sBACA,oBAAIA,MAAM,sBAAV,wBAGJ,gCACGa,EAAUJ,KAAI,SAACK,EAAUH,GACxB,OACE,+BACE,oBAAIX,MAAK,aAAQW,EAAQ,EAAI,cAAgB,eAA7C,SAA+DG,EAASC,OACxE,oBAAIf,MAAK,aAAQW,EAAQ,EAAI,cAAgB,eAA7C,SACGG,EAASE,mBAHLF,EAASC,e,MCkDfE,MA1Df,WACE,MAAkCC,mBAAS,IAA3C,mBAAOL,EAAP,KAAkBM,EAAlB,KACA,EAAkDD,mBAAS,IAA3D,mBAAOE,EAAP,KAA0BC,EAA1B,KACA,EAA0CH,mBAAS,IAAnD,mBAAOV,EAAP,KAAsBc,EAAtB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KA+BA,OA5BAC,qBAAU,YCfa,WA4BvB,IAAMd,EA3BN,SAASe,IAGN,IAFDC,EAEA,uDAFM,kCACNhB,EACA,uDADY,GAEZ,OAAO,IAAIiB,SAAQ,SAACC,EAASC,GAAV,OACjBC,MAAMJ,GACHK,MAAK,SAACC,GACL,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAM,SAElBF,EACGG,OACAJ,MAAK,SAACK,GACL1B,EAAYA,EAAU2B,OAAOD,EAAKE,SAE9BF,EAAKG,KACPd,EAAaW,EAAKG,KAAM7B,GAAWqB,KAAKH,GAASY,MAAMX,GAEvDD,EAAQlB,MAGX8B,MAAMX,MAEVW,MAAMX,MAIKJ,GAAeM,MAAK,SAACK,GAAD,OAAUA,KAChD,OAAO1B,GDbL+B,GACGV,MAAK,SAACC,GACLhB,EAAagB,GACbd,EAAqBc,GACrB,IAAMU,EAASV,EACZ1B,KAAI,SAACK,GAAD,OAAcA,EAASJ,gBAC3BoC,QAAO,SAACvC,EAAOI,EAAOoC,GAAf,OAAwBA,EAAKC,QAAQzC,KAAWI,KACvDsC,OACH3B,EAAiBuB,GACjBK,QAAQC,IAAIhB,GACZX,GAAY,MAEbmB,OAAM,WACLjB,GAAW,QAEd,IAaD,uBAAM1B,MAAM,oBAAZ,UACGyB,GACC,iMAKDF,EACC,qCACE,cAAC,EAAD,CAAUf,cAAeA,EAAeH,eAnB3B,SAACK,GACpB,IAAM0C,EACa,QAAjB1C,EACIG,EACAA,EAAUiC,QAAO,SAAChC,GAAD,OAAcA,EAASJ,eAAiBA,KAC/DW,EAAqB+B,GACrBF,QAAQC,IAAIC,MAcN,qBAAKpD,MAAM,WAAX,SACE,cAAC,EAAD,CAASa,UAAWO,SAIxB,cAAC,EAAD,QEvDRiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.72c1c9a1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SWLoader = () => {\r\n  return <div class=\"deathStar fz+\">LOADING</div>;\r\n};\r\n\r\nexport default SWLoader;\r\n","import React from \"react\";\r\n\r\nconst SWSelect = (props) => {\r\n  const handleStarshipChange = (e) => {\r\n    props.filterStarship(e.target.value);\r\n  };\r\n  return (\r\n    <div class=\"d-f ov-h pos-r w-20r select\">\r\n      <select class=\"bgc-gray900 c-white p-\" onChange={handleStarshipChange}>\r\n        <option value=\"all\"> -- Select a manufacturer -- </option>\r\n        {props.manufacturers.map((manufacturer, index) => (\r\n          <option key={index} value={manufacturer}>\r\n            {manufacturer}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SWSelect;\r\n","import React from \"react\";\r\n\r\nconst SWTable = ({ starships }) => {\r\n  return (\r\n    <table class=\"w-1/1\">\r\n      <caption class=\"d-n\">Star Wars Starships</caption>\r\n      <thead>\r\n        <tr>\r\n          <th class=\"bgc-gray900 p- ta-l\">Starship</th>\r\n          <th class=\"bgc-gray900 p- ta-l\">Class</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {starships.map((starship, index) => {\r\n          return (\r\n            <tr key={starship.name}>\r\n              <td class={`p- ${index % 2 ? \"bgc-gray800\" : \"bgc-gray700\"}`}>{starship.name}</td>\r\n              <td class={`p- ${index % 2 ? \"bgc-gray800\" : \"bgc-gray700\"}`}>\r\n                {starship.starship_class}\r\n              </td>\r\n              {/*   <td>{starship.manufacturer}</td>\r\n                <td>{starship.cost_in_credits}</td>\r\n                <td>{starship.length} meters</td>\r\n                <td>{starship.passengers}</td>\r\n                <td>{starship.max_atmosphering_speed}</td>\r\n                <td>{starship.hyperdrive_rating}</td>\r\n                <td>{starship.MGLT}</td>\r\n                <td>{starship.cargo_capacity}</td>\r\n                <td>{starship.consumables}</td> */}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default SWTable;\r\n","import React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"./utils/api\";\nimport SWLoader from \"./components/SWLoader\";\nimport SWSelect from \"./components/SWSelect\";\nimport SWTable from \"./components/SWTable\";\nimport \"./styles/main.scss\";\n\nfunction App() {\n  const [starships, setStarships] = useState([]);\n  const [filteredStarships, setFilteredStarships] = useState([]);\n  const [manufacturers, setManufacturers] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  /* on page load go get the data from api */\n  useEffect(() => {\n    fetchData()\n      .then((response) => {\n        setStarships(response);\n        setFilteredStarships(response);\n        const allMan = response\n          .map((starship) => starship.manufacturer)\n          .filter((value, index, self) => self.indexOf(value) === index)\n          .sort();\n        setManufacturers(allMan);\n        console.log(response);\n        setIsLoaded(true);\n      })\n      .catch(() => {\n        setIsError(true);\n      });\n  }, []);\n\n  /* user selects a manufacturer from dropdown */\n  let filterStarship = (manufacturer) => {\n    const findStarships =\n      manufacturer === \"all\"\n        ? starships\n        : starships.filter((starship) => starship.manufacturer === manufacturer);\n    setFilteredStarships(findStarships);\n    console.log(findStarships);\n  };\n\n  return (\n    <main class=\"ai-c d-f fxd-c p+\">\n      {isError && (\n        <div>\n          Don’t be too proud of this technological terror you’ve constructed. The ability to destroy\n          a planet is insignificant next to the power of the Force.\n        </div>\n      )}\n      {isLoaded ? (\n        <>\n          <SWSelect manufacturers={manufacturers} filterStarship={filterStarship} />\n          <div class=\"mt w-1/1\">\n            <SWTable starships={filteredStarships} />\n          </div>\n        </>\n      ) : (\n        <SWLoader />\n      )}\n    </main>\n  );\n}\n\nexport default App;\n","export const fetchData = () => {\r\n  function getStarships(\r\n    url = \"https://swapi.dev/api/starships\",\r\n    starships = []\r\n  ) {\r\n    return new Promise((resolve, reject) =>\r\n      fetch(url)\r\n        .then((response) => {\r\n          if (response.status !== 200) {\r\n            throw new Error(\"error\");\r\n          }\r\n          response\r\n            .json()\r\n            .then((data) => {\r\n              starships = starships.concat(data.results);\r\n\r\n              if (data.next) {\r\n                getStarships(data.next, starships).then(resolve).catch(reject);\r\n              } else {\r\n                resolve(starships);\r\n              }\r\n            })\r\n            .catch(reject);\r\n        })\r\n        .catch(reject)\r\n    );\r\n  }\r\n\r\n  const starships = getStarships().then((data) => data);\r\n  return starships;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}