{"version":3,"sources":["components/SwLoader/index.js","components/SwSelect/index.js","components/SwTable/index.js","App.js","utils/api.js","utils/getUnique.js","index.js"],"names":["SwLoader","props","className","style","SwSelect","onChange","e","filterStarship","target","value","tabIndex","manufacturers","map","manufacturer","index","SwTable","starships","starship","name","starship_class","length","App","useState","setStarships","filteredStarships","setFilteredStarships","setManufacturers","selectedManufacturer","setSelectedManufacturer","isLoaded","setIsLoaded","isError","setIsError","useEffect","fetchStarships","url","Promise","resolve","reject","fetch","then","response","status","Error","json","data","concat","results","next","catch","key","sortedStarships","sort","a","b","obj","filter","self","indexOf","findStarships","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAMeA,EAJE,SAACC,GAChB,OAAO,qBAAKC,UAAU,kBAAkBC,MAAOF,EAAME,SCmBxCC,G,MAnBE,SAACH,GAIhB,OACE,qBAAKC,UAAU,wBAAf,SACE,yBAAQA,UAAU,+BAA+BG,SALxB,SAACC,GAC5BL,EAAMM,eAAeD,EAAEE,OAAOC,QAIqDC,SAAS,IAA1F,UACE,wBAAQD,MAAM,MAAd,2CACCR,EAAMU,eACLV,EAAMU,cAAcC,KAAI,SAACC,EAAcC,GAAf,OACtB,wBAAoBL,MAAOI,EAA3B,SACGA,GADUC,aCsBVC,EAjCC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,OACE,wBAAOd,UAAU,QAAjB,UACE,yBAASA,UAAU,MAAnB,iCACA,gCACE,+BACE,oBAAIA,UAAU,sBAAd,sBACA,oBAAIA,UAAU,sBAAd,mBACA,oBAAIA,UAAU,sBAAd,yBAGJ,gCACGc,GACCA,EAAUJ,KAAI,SAACK,EAAUH,GACvB,OACE,+BACE,oBAAIZ,UAAS,kBAAaY,EAAQ,EAAI,cAAgB,eAAtD,SACGG,EAASC,OAEZ,oBAAIhB,UAAS,kBAAaY,EAAQ,EAAI,cAAgB,eAAtD,SACGG,EAASE,iBAEZ,qBAAIjB,UAAS,yBAAoBY,EAAQ,EAAI,cAAgB,eAA7D,UACGG,EAASG,OADZ,UAPOH,EAASC,e,MC0DjBG,MAnEf,WAEE,MAAkCC,mBAAS,IAA3C,mBAAON,EAAP,KAAkBO,EAAlB,KACA,EAAkDD,mBAAS,IAA3D,mBAAOE,EAAP,KAA0BC,EAA1B,KACA,EAA0CH,mBAAS,IAAnD,mBAAOX,EAAP,KAAsBe,EAAtB,KACA,EAAwDJ,mBAAS,OAAjE,mBAAOK,EAAP,KAA6BC,EAA7B,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAiCA,OA9BAC,qBAAU,YChBV,SAASC,IAAyE,IAA1DC,EAAyD,uDAAnD,kCAAmCnB,EAAgB,uDAAJ,GAC3E,OAAO,IAAIoB,SAAQ,SAACC,EAASC,GAAV,OACjBC,MAAMJ,GACHK,MAAK,SAACC,GACL,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAM,SAElBF,EACGG,OACAJ,MAAK,SAACK,GACL7B,EAAYA,EAAU8B,OAAOD,EAAKE,SAE9BF,EAAKG,KACPd,EAAeW,EAAKG,KAAMhC,GAAWwB,KAAKH,GAASY,MAAMX,GAEzDD,EAAQrB,MAGXiC,MAAMX,MAEVW,MAAMX,OAGNJ,GAAiBM,MAAK,SAACK,GAAD,OAAUA,KDLlCL,MAAK,SAACC,GACL,IEnBwBS,EFmBlBC,EAAkBV,EAASW,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEnC,KAAOoC,EAAEpC,KAAO,GAAK,KAExEK,EAAa4B,GACb1B,EAAqB0B,GAErBzB,GExBwBwB,EFwBoB,eAAjBC,EEtB9BvC,KAAI,SAAC2C,GAAD,OAASA,EAAIL,MACjBM,QAAO,SAAC/C,EAAOK,EAAO2C,GAAf,OAAwBA,EAAKC,QAAQjD,KAAWK,KACvDsC,SFsBGtB,GAAY,MAEbmB,OAAM,WACLjB,GAAW,QAEd,IAgBD,uBAAM9B,UAAU,mBAAhB,UACG6B,GACC,uLAKDF,EACC,qBAAK3B,UAAU,KAAf,SACE,cAAC,EAAD,CAAUS,cAAeA,EAAeJ,eAtBzB,SAACM,GAEtBe,EAAwBf,GAExB,IAAM8C,EACa,QAAjB9C,EACIG,EACAA,EAAUwC,QAAO,SAACvC,GAAD,OAAcA,EAASJ,eAAiBA,KAE/DY,EAAqBkC,QAgBjB,qBAAKzD,UAAU,WAAf,SACE,cAAC,EAAD,MAGH2B,GAAY,qBAAK3B,UAAU,yBAAf,SAAyCyB,IACrDE,EACC,cAAC,EAAD,CAASb,UAAWQ,IAEpB,cAAC,EAAD,CAAUrB,MAAO,CAAEyD,OAAQ,eGjEnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ce6107e3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SwLoader = (props) => {\r\n  return <div className=\"anim-01 p w-1/1\" style={props.style}></div>;\r\n};\r\n\r\nexport default SwLoader;\r\n","import React from \"react\";\r\nimport \"./select.css\";\r\n\r\nconst SwSelect = (props) => {\r\n  const handleStarshipChange = (e) => {\r\n    props.filterStarship(e.target.value);\r\n  };\r\n  return (\r\n    <div className=\"d-f pos-r ov-h select\">\r\n      <select className=\"bgc-gray900 c-white p- w-1/1\" onChange={handleStarshipChange} tabIndex=\"0\">\r\n        <option value=\"All\"> -- Select a manufacturer -- </option>\r\n        {props.manufacturers &&\r\n          props.manufacturers.map((manufacturer, index) => (\r\n            <option key={index} value={manufacturer}>\r\n              {manufacturer}\r\n            </option>\r\n          ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SwSelect;\r\n","import React from \"react\";\r\n\r\nconst SwTable = ({ starships }) => {\r\n  return (\r\n    <table className=\"w-1/1\">\r\n      <caption className=\"d-n\">Star Wars Starships</caption>\r\n      <thead>\r\n        <tr>\r\n          <th className=\"bgc-gray900 p- ta-l\">Starship</th>\r\n          <th className=\"bgc-gray900 p- ta-l\">Class</th>\r\n          <th className=\"bgc-gray900 p- ta-l\">Length</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {starships &&\r\n          starships.map((starship, index) => {\r\n            return (\r\n              <tr key={starship.name}>\r\n                <td className={`p- va-t ${index % 2 ? \"bgc-gray800\" : \"bgc-gray700\"}`}>\r\n                  {starship.name}\r\n                </td>\r\n                <td className={`p- va-t ${index % 2 ? \"bgc-gray800\" : \"bgc-gray700\"}`}>\r\n                  {starship.starship_class}\r\n                </td>\r\n                <td className={`p- va-t whs-nw ${index % 2 ? \"bgc-gray800\" : \"bgc-gray700\"}`}>\r\n                  {starship.length} m\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default SwTable;\r\n","import React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"./utils/api\";\nimport { getUnique } from \"./utils/getUnique\";\nimport SwLoader from \"./components/SwLoader\";\nimport SwSelect from \"./components/SwSelect\";\nimport SwTable from \"./components/SwTable\";\nimport \"./styles/main.scss\";\n\nfunction App() {\n  /* state variables */\n  const [starships, setStarships] = useState([]);\n  const [filteredStarships, setFilteredStarships] = useState([]);\n  const [manufacturers, setManufacturers] = useState([]);\n  const [selectedManufacturer, setSelectedManufacturer] = useState(\"All\");\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  /* on page load go get the data from api */\n  useEffect(() => {\n    fetchData()\n      .then((response) => {\n        const sortedStarships = response.sort((a, b) => (a.name > b.name ? 1 : -1));\n        /* add all starships and filtered starships to state */\n        setStarships(sortedStarships);\n        setFilteredStarships(sortedStarships);\n        /* add manufacturers to state */\n        setManufacturers(getUnique(sortedStarships, \"manufacturer\"));\n        /* all data is loaded */\n        setIsLoaded(true);\n      })\n      .catch(() => {\n        setIsError(true);\n      });\n  }, []);\n\n  /* user selects a manufacturer from dropdown */\n  const filterStarship = (manufacturer) => {\n    /* add selected manufacturer to state */\n    setSelectedManufacturer(manufacturer);\n    /* filter down original starship array by passed in manufacturer */\n    const findStarships =\n      manufacturer === \"All\"\n        ? starships\n        : starships.filter((starship) => starship.manufacturer === manufacturer);\n    /* add filtered starships to state */\n    setFilteredStarships(findStarships);\n  };\n\n  return (\n    <main className=\"ai-c d-f fxd-c p\">\n      {isError && (\n        <div>\n          Don't be too proud of this technological terror you've constructed. The ability to destroy\n          a planet is insignificant next to the power of the Force.\n        </div>\n      )}\n      {isLoaded ? (\n        <div className=\"mb\">\n          <SwSelect manufacturers={manufacturers} filterStarship={filterStarship} />\n        </div>\n      ) : (\n        <div className=\"mb w-1/1\">\n          <SwLoader />\n        </div>\n      )}\n      {isLoaded && <div className=\"p- w-1/1 bgc-purple900\">{selectedManufacturer}</div>}\n      {isLoaded ? (\n        <SwTable starships={filteredStarships} />\n      ) : (\n        <SwLoader style={{ height: \"500px\" }} />\n      )}\n    </main>\n  );\n}\n\nexport default App;\n","/* swapi is a page based api, in order to get all starships have to stich all calls together */\r\nexport const fetchData = () => {\r\n  function fetchStarships(url = \"https://swapi.dev/api/starships\", starships = []) {\r\n    return new Promise((resolve, reject) =>\r\n      fetch(url)\r\n        .then((response) => {\r\n          if (response.status !== 200) {\r\n            throw new Error(\"error\");\r\n          }\r\n          response\r\n            .json()\r\n            .then((data) => {\r\n              starships = starships.concat(data.results);\r\n              /* if there are more pages in api, make recursive call */\r\n              if (data.next) {\r\n                fetchStarships(data.next, starships).then(resolve).catch(reject);\r\n              } else {\r\n                resolve(starships);\r\n              }\r\n            })\r\n            .catch(reject);\r\n        })\r\n        .catch(reject)\r\n    );\r\n  }\r\n  return fetchStarships().then((data) => data);\r\n};\r\n","/* returns unique values from array of objects based on key */\r\n\r\nexport const getUnique = (data, key) => {\r\n  return data\r\n    .map((obj) => obj[key])\r\n    .filter((value, index, self) => self.indexOf(value) === index)\r\n    .sort();\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}